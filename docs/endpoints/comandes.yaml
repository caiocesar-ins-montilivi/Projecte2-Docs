openapi: "3.1.0"
info:
  version: 1.0.0
  title: Endpoints de comandes
servers:
  - url: https://culinaryjetapp.daw.institutmontilivi.cat/api
  - url: http://culinaryjetapp.daw.institutmontilivi.cat/api
paths:
  /plats:
    get:
      summary: Llista tots els plats
      operationId: LlistarPlats
      tags:
        - GET Plats
      responses:
        200:
          description: Array de plats
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          body:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /plat/contingut:
    get:
      summary: Informació per a un plat especific
      operationId: ContingutPlat
      tags:
        - GET Plats
      parameters:
        - name: platId
          in: query
          required: true
          description: El ID únic del plat a retornar.
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /plat/afegir:
    post:
      summary: Crea un nou plat segons els paràmetres entrats
      operationId: AfegirPlat
      tags:
        - POST Plats
      parameters:
        - name: nom
          in: query
          required: false
          description: El nom del plat a retornar.
          schema:
            type: string
        - name: descripcio
          in: query
          required: false
          description: La descripció del plat a retornar.
          schema:
            type: string
        - name: tipus
          in: query
          required: false
          description: El tipus del plat a retornar.
          schema:
            type: string
            enum: [Entrant, Principal, Postre]
            example: Entrant
        - name: suplement
          in: query
          required: false
          description: Cost del suplement en €
          schema:
            type: integer
        - name: temps_prep
          in: query
          required: false
          description: Temps de preparació del plat.
          schema:
            type: integer
            minimum: 1
        - name: dies_set
          in: query
          required: false
          description: Els dies de la setmana que estarà disponible.
          schema:
            type: integer
            minimum: 1
        - name: gluten
          in: query
          required: false
          description: Conté gluten.
          schema:
            type: boolean
            example: false
        - name: lactosa
          in: query
          required: false
          description: Conté lactosa.
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  # 2) Apply the security globally to all operations
  security:
    - bearerAuth: [] # use the same name as above
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
